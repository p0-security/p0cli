on:
  pull_request:
    branches:
      - main

name: Build Standalone CLI

jobs:
  build_macos:
    name: Build CLI on MacOS
    runs-on: macos-latest-xlarge
    env:
      APPLE_APP_STORE_CONNECT_KEY_ID: ${{ secrets.APPLE_APP_STORE_CONNECT_KEY_ID }}
      APPLE_APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APPLE_APP_STORE_CONNECT_ISSUER_ID }}
      APPLE_CODESIGN_CERT_NAME: "Developer ID Application: P0 Security, Inc. (FFR8KSH76M)"
      APPLE_INSTALLER_CERT_NAME: "Developer ID Installer: P0 Security, Inc. (FFR8KSH76M)"
      VERSION: v0.0.0
    steps:
      - uses: actions/checkout@v4
      - name: Setup environment variables
        run: |
          KEYCHAIN_PASSWORD=$(openssl rand -hex 32)
          echo "::add-mask::$KEYCHAIN_PASSWORD"
          echo "KEYCHAIN_PASSWORD=$KEYCHAIN_PASSWORD" >> "$GITHUB_ENV"
      - name: Import certificates and setup Keychain
        run: |
          echo "${{ secrets.APPLE_DEVELOPER_ID_CERTIFICATE_BASE64 }}" | base64 --decode > codesign_certificate.p12
          echo "${{ secrets.APPLE_DEVELOPER_ID_INSTALLER_CERT_BASE64 }}" | base64 --decode > installer_certificate.p12
          echo "${{ secrets.APPLE_APP_STORE_CONNECT_PRIVATE_KEY_BASE64 }}" | base64 --decode > app_store_connect_private_key.p8

          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain

          security import codesign_certificate.p12 -k build.keychain -P "${{ secrets.APPLE_DEVELOPER_ID_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          security import installer_certificate.p12 -k build.keychain -P "${{ secrets.APPLE_DEVELOPER_ID_CERTIFICATE_PASSWORD }}" -T /usr/bin/pkgbuild
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" build.keychain

          security set-keychain-settings -lut 3600 build.keychain
      - name: Cache FIPS-compliant Node.js
        id: cache-fips-node
        uses: actions/cache@v4
        with:
          path: ~/fips-node
          key: fips-node-${{ hashFiles('.nvmrc') }}-${{ runner.os }}-openssl3.1.2-v1
      - name: Build FIPS-compliant OpenSSL
        if: steps.cache-fips-node.outputs.cache-hit != 'true'
        run: |
          # Create build directory
          mkdir -p ~/fips-node-build
          cd ~/fips-node-build

          # Download and extract OpenSSL source
          curl -L https://www.openssl.org/source/openssl-3.1.2.tar.gz | tar -xz
          cd openssl-3.1.2

          echo "===== Starting building OpenSSL ====="

          # Build OpenSSL 3.1.2 with FIPS support

          # Configure OpenSSL build to built a FIPS-compliant openssl version
          ./Configure darwin64-arm64-cc --prefix=$HOME/fips-node/openssl enable-fips

          # Build OpenSSL
          make -j$(getconf _NPROCESSORS_ONLN)

          # Install OpenSSL into $HOME/fips-node/openssl directory
          make install

          echo "===== Finished building OpenSSL ====="
      - name: Configure FIPS
        run: |
          # Configure OpenSSL FIPS (always run to ensure fresh checksums)
          cd $HOME/fips-node/openssl

          # Debug: Verify FIPS module exists
          echo "=== FIPS Module Check ==="
          ls -la lib/ossl-modules/
          echo "=========================="

          echo "=== Create OpenSSL Config ==="
          tee openssl.cnf <<-EOF
            config_diagnostics = 1
            openssl_conf = openssl_init
            nodejs_conf = nodejs_init

            .include $HOME/fips-node/openssl/fipsmodule.cnf

            [openssl_init]
            providers = provider_sect

            [nodejs_init]
            providers = provider_sect

            [provider_sect]
            fips = fips_sect
            base = base_sect
            default = default_sect

            [base_sect]
            activate = 1

            [default_sect]
            activate = 1

            [fips_sect]
            activate = 1
          EOF
          echo "==========================="
      - name: Build FIPS-compliant Node.js
        if: steps.cache-fips-node.outputs.cache-hit != 'true'
        run: |
          cd ~/fips-node-build

          # Get Node.js version from .nvmrc
          NODE_VERSION=$(cat $GITHUB_WORKSPACE/.nvmrc)

          # Download and extract Node.js source
          curl -L https://nodejs.org/dist/${NODE_VERSION}/node-${NODE_VERSION}.tar.gz | tar -xz
          cd node-${NODE_VERSION}

          echo "===== Starting building Node.js ====="

          export OPENSSL_CONF=$HOME/fips-node/openssl/openssl.cnf
          # export DYLD_LIBRARY_PATH=$HOME/fips-node/openssl/lib:$DYLD_LIBRARY_PATH
          export OPENSSL_MODULES=$HOME/fips-node/openssl/lib/ossl-modules

          # Configure Node.js with FIPS support using our custom OpenSSL 3.1.2
          ./configure \
            --shared-openssl \
            --shared-openssl-libpath=$HOME/fips-node/openssl/lib \
            --shared-openssl-includes=$HOME/fips-node/openssl/include \
            --shared-openssl-libname=crypto,ssl \
            --openssl-is-fips \
            --prefix=$HOME/fips-node

          # Build Node.js
          make -j$(getconf _NPROCESSORS_ONLN)

          # Install OpenSSL into $HOME/fips-node directory
          make install

          echo "===== Finished building Node.js ====="
      - name: Setup FIPS Node.js in PATH
        run: |
          echo "$HOME/fips-node/bin" >> $GITHUB_PATH
      - name: Install yarn
        run: |
          export OPENSSL_CONF=$HOME/fips-node/openssl/openssl.cnf
          export OPENSSL_MODULES=$HOME/fips-node/openssl/lib/ossl-modules

          npm install -g yarn
      - name: Verify FIPS Node.js
        run: |
          export OPENSSL_CONF=$HOME/fips-node/openssl/openssl.cnf
          export OPENSSL_MODULES=$HOME/fips-node/openssl/lib/ossl-modules

          echo "✅ Node.js version: $($HOME/fips-node/bin/node --version)"

          # Check FIPS mode and fail if not enabled
          FIPS_STATUS=$($HOME/fips-node/bin/node --enable-fips -e "console.log(require('crypto').getFips())")

          if [ "$FIPS_STATUS" != "1" ]; then
            echo "❌ FIPS mode is not enabled! Expected '1', got '$FIPS_STATUS'"
            exit 1
          fi

          echo "✅ FIPS enabled: $FIPS_STATUS"
      - name: Install dependencies
        run: yarn install
      - name: Build
        run: |
          export OPENSSL_CONF=$HOME/fips-node/openssl/openssl.cnf
          export OPENSSL_MODULES=$HOME/fips-node/openssl/lib/ossl-modules

          yarn build:macos
          ./mac/build-macOS.sh
      - name: Package application
        run: |
          mkdir -p build/sea/root/usr/local/bin
          mkdir -p build/sea/root/usr/local/lib/p0

          # Copy the binary
          cp build/sea/p0 build/sea/root/usr/local/bin/p0

          # Copy required OpenSSL libraries and binary
          cp $HOME/fips-node/openssl/lib/libssl.3.dylib build/sea/root/usr/local/lib/p0/
          cp $HOME/fips-node/openssl/lib/libcrypto.3.dylib build/sea/root/usr/local/lib/p0/
          cp -r $HOME/fips-node/openssl/lib/ossl-modules build/sea/root/usr/local/lib/p0/
          cp $HOME/fips-node/openssl/bin/openssl build/sea/root/usr/local/lib/p0/

          # Create updated FIPS configuration files with correct bundled paths

          # Regenerate fipsmodule.cnf for the bundled FIPS module location
          # This ensures the self-test checksums are correct for the final location
          $HOME/fips-node/openssl/bin/openssl fipsinstall \
            -out build/sea/root/usr/local/lib/p0/fipsmodule.cnf \
            -module build/sea/root/usr/local/lib/p0/ossl-modules/fips.dylib

          # Update openssl.cnf to reference the bundled fipsmodule.cnf
          sed 's|\.include .*/fipsmodule\.cnf|.include /usr/local/lib/p0/fipsmodule.cnf|g' $HOME/fips-node/openssl/openssl.cnf > build/sea/root/usr/local/lib/p0/openssl.cnf

          # Update binary to look for libraries in the bundled location
          install_name_tool -change $HOME/fips-node/openssl/lib/libssl.3.dylib @executable_path/../lib/p0/libssl.3.dylib build/sea/root/usr/local/bin/p0
          install_name_tool -change $HOME/fips-node/openssl/lib/libcrypto.3.dylib @executable_path/../lib/p0/libcrypto.3.dylib build/sea/root/usr/local/bin/p0

          # Update OpenSSL binary to look for libraries in the bundled location
          install_name_tool -change $HOME/fips-node/openssl/lib/libssl.3.dylib @loader_path/libssl.3.dylib build/sea/root/usr/local/lib/p0/openssl
          install_name_tool -change $HOME/fips-node/openssl/lib/libcrypto.3.dylib @loader_path/libcrypto.3.dylib build/sea/root/usr/local/lib/p0/openssl

          # Also update any interdependencies between the OpenSSL libraries themselves
          install_name_tool -change $HOME/fips-node/openssl/lib/libcrypto.3.dylib @loader_path/libcrypto.3.dylib build/sea/root/usr/local/lib/p0/libssl.3.dylib
      - name: Codesign binary and bundled libraries
        run: |
          # Codesign the main binary (after install_name_tool modifications)
          codesign --force --verbose=5 --timestamp --entitlements ./mac/entitlements.plist --options runtime --sign "${{ env.APPLE_CODESIGN_CERT_NAME }}" --keychain "build.keychain" build/sea/root/usr/local/bin/p0

          # Codesign bundled OpenSSL libraries and binary for notarization
          codesign --verbose=4 --timestamp --options runtime --sign "${{ env.APPLE_CODESIGN_CERT_NAME }}" --keychain "build.keychain" build/sea/root/usr/local/lib/p0/libssl.3.dylib
          codesign --verbose=4 --timestamp --options runtime --sign "${{ env.APPLE_CODESIGN_CERT_NAME }}" --keychain "build.keychain" build/sea/root/usr/local/lib/p0/libcrypto.3.dylib
          codesign --verbose=4 --timestamp --options runtime --sign "${{ env.APPLE_CODESIGN_CERT_NAME }}" --keychain "build.keychain" build/sea/root/usr/local/lib/p0/openssl

          # Sign all OpenSSL modules (fips.dylib, legacy.dylib, etc.)
          find build/sea/root/usr/local/lib/p0/ossl-modules/ -name "*.dylib" -exec codesign --verbose=4 --timestamp --options runtime --sign "${{ env.APPLE_CODESIGN_CERT_NAME }}" --keychain "build.keychain" {} \;

          # Debug: Verify all signatures before packaging
          echo "=== Verifying signatures ==="
          codesign --verify --verbose build/sea/root/usr/local/bin/p0
          codesign --verify --verbose build/sea/root/usr/local/lib/p0/libssl.3.dylib
          codesign --verify --verbose build/sea/root/usr/local/lib/p0/libcrypto.3.dylib
          codesign --verify --verbose build/sea/root/usr/local/lib/p0/openssl

          # Verify all OpenSSL modules
          find build/sea/root/usr/local/lib/p0/ossl-modules/ -name "*.dylib" -exec codesign --verify --verbose {} \;
          echo "=== All signatures verified ==="

          # Create the signed package
          pkgbuild --identifier dev.p0.cli --version "${{ env.VERSION }}" --install-location / --sign "${{ env.APPLE_INSTALLER_CERT_NAME }}" --keychain "build.keychain" --root build/sea/root build/sea/p0-macOS-${{ env.VERSION }}.pkg
      - name: Notarize build artifact
        run: |
          # Submit for notarization and capture the submission ID
          SUBMISSION_ID=$(xcrun notarytool submit build/sea/p0-macOS-${{ env.VERSION }}.pkg --key app_store_connect_private_key.p8 --key-id "$APPLE_APP_STORE_CONNECT_KEY_ID" --issuer "$APPLE_APP_STORE_CONNECT_ISSUER_ID" --wait --output-format json | jq -r '.id')

          # Get detailed log if notarization fails
          xcrun notarytool log "$SUBMISSION_ID" --key app_store_connect_private_key.p8 --key-id "$APPLE_APP_STORE_CONNECT_KEY_ID" --issuer "$APPLE_APP_STORE_CONNECT_ISSUER_ID"

          xcrun stapler staple build/sea/p0-macOS-${{ env.VERSION }}.pkg
      - name: Upload artifact to workflow
        uses: actions/upload-artifact@v4
        with:
          name: p0-macOS-${{ env.VERSION }}
          path: build/sea/p0-macOS-${{ env.VERSION }}.pkg
      # - name: Upload artifact to release
      #   uses: softprops/action-gh-release@v2
      #   with:
      #     files: build/sea/p0-macOS-${{ env.VERSION }}.pkg
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Cleanup keychain
        run: |
          security delete-keychain build.keychain
  build_windows:
    name: Build CLI on Windows
    runs-on: windows-latest
    env:
      SSL_COM_USERNAME: ${{ secrets.SSL_COM_USERNAME }}
      SSL_COM_PASSWORD: ${{ secrets.SSL_COM_PASSWORD }}
      SSL_COM_TOTP_SECRET: ${{ secrets.SSL_COM_TOTP_SECRET }}
      SSL_COM_CREDENTIAL_ID: ${{ secrets.SSL_COM_CREDENTIAL_ID }}
      VERSION: v0.0.0
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: yarn
          cache-dependency-path: |
            yarn.lock
      - uses: KamaranL/add-signtool-action@v1
      - name: Yarn install
        run: yarn install
      - name: Build
        run: |
          yarn build:windows
          .\win\build-windows.bat
      - name: Sign binary
        uses: sslcom/esigner-codesign@b7f8ff36fc0de8690fbbab8e5b4421d29802f747
        with:
          username: ${{ env.SSL_COM_USERNAME }}
          password: ${{ env.SSL_COM_PASSWORD }}
          totp_secret: ${{ env.SSL_COM_TOTP_SECRET }}
          credential_id: ${{ env.SSL_COM_CREDENTIAL_ID }}
          file_path: ${{ github.workspace }}\build\sea\p0.exe
          override: true
          command: sign
      - name: Package application
        run: |
          node .\win\preprocess-wxs.cjs
          candle .\win\p0.wxs -o build\sea\installer.wixobj
          light build\sea\installer.wixobj -o build\sea\p0-windows-${{ env.VERSION }}.msi -ext WixUIExtension -ext WixUtilExtension -cultures:en-us
      - name: Sign installer
        uses: sslcom/esigner-codesign@b7f8ff36fc0de8690fbbab8e5b4421d29802f747
        with:
          username: ${{ env.SSL_COM_USERNAME }}
          password: ${{ env.SSL_COM_PASSWORD }}
          totp_secret: ${{ env.SSL_COM_TOTP_SECRET }}
          credential_id: ${{ env.SSL_COM_CREDENTIAL_ID }}
          file_path: ${{ github.workspace }}\build\sea\p0-windows-${{ env.VERSION }}.msi
          override: true
          command: sign
      - name: Upload artifact to workflow
        uses: actions/upload-artifact@v4
        with:
          name: p0-windows-${{ env.VERSION }}
          path: build\sea\p0-windows-${{ env.VERSION }}.msi
      # - name: Upload artifact to release
      #   uses: softprops/action-gh-release@v2
      #   with:
      #     files: build/sea/p0-windows-${{ env.VERSION }}.msi
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
